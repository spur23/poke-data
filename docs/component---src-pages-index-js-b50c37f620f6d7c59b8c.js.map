{"version":3,"sources":["webpack:///./src/utils/index.js","webpack:///./src/components/PokeCard.js","webpack:///./src/components/SearchBar.js","webpack:///./src/pages/index.js"],"names":["capitalizeFirstLetter","str","charAt","toUpperCase","slice","Container","CardData","pokeId","pokeData","useStaticQuery","allIndvpokemon","edges","filter","el","node","name","types","abilities","map","type","key","ability","PokeCard","title","image","id","onMouseEnter","onHoverId","css","fixed","className","SearchBar","searchTerm","searchInput","onSubmit","e","preventDefault","value","onChange","target","HomePage","data","nodes","allPokemon","useState","length","hasMore","setMore","currentList","addToList","searchRender","setSearchRender","cardHover","setCardHover","setSearchTerm","imageMap","pokeImage","allImageSharp","parent","to","onHoverEnter","handleScroll","currentLength","more","nextEdges","window","innerHeight","document","documentElement","scrollTop","offsetHeight","useEffect","addEventListener","searchArray","includes","undefined","removeEventListener","input"],"mappings":"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","file":"component---src-pages-index-js-b50c37f620f6d7c59b8c.js","sourcesContent":["export function capitalizeFirstLetter(str) {\r\n  return str.charAt(0).toUpperCase() + str.slice(1);\r\n}\r\n","import React from \"react\";\r\nimport Img from \"gatsby-image\";\r\nimport { graphql, useStaticQuery } from \"gatsby\";\r\nimport { css } from \"@emotion/core\";\r\nimport { capitalizeFirstLetter } from \"../utils\";\r\n\r\nconst Container = css`\r\n  display: flex;\r\n  flex-direction: column;\r\n  border: 1px solid black;\r\n  border-radius: 10px;\r\n  box-shadow: 2px 3px lightgrey;\r\n  background: #48dbfb;\r\n  width: 8rem;\r\n  height: 10rem;\r\n  :hover {\r\n    transform: scale(1.01);\r\n    cursor: pointer;\r\n  }\r\n  & h3,\r\n  p,\r\n  h4 {\r\n    text-align: center;\r\n    margin: 0;\r\n  }\r\n  & h4 {\r\n    margin-top: 0.1rem;\r\n  }\r\n  & .poke-image {\r\n    align-self: center;\r\n  }\r\n`;\r\nfunction CardData({ pokeId }) {\r\n  const data = useStaticQuery(graphql`\r\n    {\r\n      allIndvpokemon {\r\n        edges {\r\n          node {\r\n            name\r\n            abilities {\r\n              ability {\r\n                name\r\n              }\r\n            }\r\n            types {\r\n              type {\r\n                name\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  const pokeData = data.allIndvpokemon.edges.filter(\r\n    (el) => el.node.name === pokeId\r\n  );\r\n\r\n  const types = pokeData[0].node.types;\r\n  const abilities = pokeData[0].node.abilities;\r\n\r\n  return (\r\n    <>\r\n      <h4>Type:</h4>\r\n      {types.map((type) => (\r\n        <p key={type.type.name}>{capitalizeFirstLetter(type.type.name)}</p>\r\n      ))}\r\n      <h4>Abilities:</h4>\r\n      {abilities.map((ability) => (\r\n        <p key={ability.ability.name}>\r\n          {capitalizeFirstLetter(ability.ability.name)}\r\n        </p>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction PokeCard({ title, image, id, onMouseEnter, onHoverId }) {\r\n  return (\r\n    <div css={Container} id={id} onMouseEnter={onMouseEnter}>\r\n      <h3>{title}</h3>\r\n      {id === onHoverId ? (\r\n        <CardData pokeId={onHoverId} />\r\n      ) : (\r\n        <Img fixed={image} id={id} className=\"poke-image\" />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PokeCard;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin: 3rem auto;\r\n  padding: 0 1rem;\r\n  background: #ecf0f1;\r\n  width: 20rem;\r\n  justify-content: center;\r\n  & input {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst SearchBar = ({ searchTerm, searchInput }) => {\r\n  const onChange = (e) => {\r\n    searchInput(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          Search Pokemon:\r\n          <input type=\"text\" value={searchTerm} onChange={onChange} />\r\n        </label>\r\n      </form>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { graphql, useStaticQuery, Link } from \"gatsby\";\r\nimport styled from \"@emotion/styled\";\r\nimport PokeCard from \"../components/PokeCard\";\r\nimport SearchBar from \"../components/SearchBar\";\r\nimport Layout from \"../components/layout\";\r\nimport { capitalizeFirstLetter } from \"../utils/index\";\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(4, auto);\r\n  grid-template-rows: repeat(4, auto);\r\n  align-content: center;\r\n  justify-contant: center;\r\n  row-gap: 2rem;\r\n  column-gap: 2rem;\r\n  margin: 3rem auto;\r\n  max-width: 50vw;\r\n  padding: 0 1rem;\r\n  background: #ecf0f1;\r\n  & a {\r\n    color: black;\r\n    text-decoration: none;\r\n  }\r\n`;\r\n\r\nfunction HomePage() {\r\n  const data = useStaticQuery(graphql`\r\n    {\r\n      allPokemon {\r\n        nodes {\r\n          id\r\n          name\r\n        }\r\n      }\r\n      allImageSharp {\r\n        nodes {\r\n          parent {\r\n            id\r\n            ... on File {\r\n              name\r\n            }\r\n          }\r\n          fixed(width: 100, height: 100) {\r\n            ...GatsbyImageSharpFixed\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n  const {\r\n    allPokemon: { nodes },\r\n  } = data;\r\n  const [hasMore, setMore] = useState(nodes.length > 20);\r\n  const [currentList, addToList] = useState([...nodes.slice(0, 20)]);\r\n  const [searchRender, setSearchRender] = useState([]);\r\n  const [cardHover, setCardHover] = useState(\"\");\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n  const imageMap = ({ name, id }) => {\r\n    const pokeImage = data.allImageSharp.nodes.filter(\r\n      (el) => el.parent.name === id\r\n    );\r\n    if (pokeImage.length < 1) return;\r\n\r\n    return (\r\n      <Link to={name} key={name}>\r\n        <PokeCard\r\n          title={capitalizeFirstLetter(name)}\r\n          image={pokeImage[0].fixed}\r\n          key={name}\r\n          id={name}\r\n          onMouseEnter={onHoverEnter}\r\n          onHoverId={cardHover}\r\n        />\r\n      </Link>\r\n    );\r\n  };\r\n\r\n  const loadEdges = () => {\r\n    const currentLength = currentList.length;\r\n    const more = currentLength < nodes.length;\r\n    const nextEdges = more\r\n      ? nodes.slice(currentLength, currentLength + 20)\r\n      : [];\r\n    setMore(more);\r\n    addToList([...currentList, ...nextEdges]);\r\n  };\r\n\r\n  const handleScroll = () => {\r\n    if (!hasMore) return;\r\n    if (\r\n      window &&\r\n      window.innerHeight + document.documentElement.scrollTop >=\r\n        document.documentElement.offsetHeight\r\n    ) {\r\n      loadEdges(true);\r\n    }\r\n  };\r\n\r\n  const onHoverEnter = (e) => {\r\n    if (cardHover === e.target.id) {\r\n      setCardHover(\"\");\r\n    }\r\n\r\n    setCardHover(e.target.id);\r\n  };\r\n\r\n  const searchInputChange = (input) => {\r\n    setSearchTerm(input);\r\n  };\r\n\r\n  useEffect(() => {\r\n    window && window.addEventListener(\"scroll\", handleScroll);\r\n    const searchArray = nodes.filter((el) => el.name.includes(searchTerm));\r\n    if (searchTerm.length === 0 || searchTerm === undefined) {\r\n      setSearchRender([]);\r\n    }\r\n    setSearchRender(searchArray);\r\n    return () => {\r\n      // clean up function\r\n      window && window.removeEventListener(\"scroll\", handleScroll);\r\n    };\r\n  }, [hasMore, currentList, searchTerm]);\r\n\r\n  return (\r\n    <Layout>\r\n      <SearchBar searchTerm={searchTerm} searchInput={searchInputChange} />\r\n      <Container>\r\n        {searchRender.length === 0\r\n          ? currentList.map(imageMap)\r\n          : searchRender.map(imageMap)}\r\n      </Container>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n"],"sourceRoot":""}